import {
  AccountInfo,
  Connection,
  PublicKey,
  TransactionInstruction,
} from "@solana/web3.js";
import { depositLpToken } from "./deposit";
import {
  CollectCoinCreatorFeeSolanaState,
  CreatePoolSolanaState,
  DepositBaseAndLpTokenFromQuoteResult,
  DepositQuoteAndLpTokenFromBaseResult,
  Direction,
  GlobalConfig,
  LiquiditySolanaState,
  SwapSolanaState,
  WithdrawAutocompleteResult,
} from "../types/sdk";
import { PumpAmmInternalSdk } from "./pumpAmmInternal";
import { PUMP_AMM_PROGRAM_ID } from "./pda";
import BN from "bn.js";

export class PumpAmmSdk {
  private readonly pumpAmmInternalSdk: PumpAmmInternalSdk;

  constructor(connection: Connection, programId: string = PUMP_AMM_PROGRAM_ID) {
    this.pumpAmmInternalSdk = new PumpAmmInternalSdk(connection, programId);
  }

  programId(): PublicKey {
    return this.pumpAmmInternalSdk.programId();
  }

  globalConfigKey(): PublicKey {
    return this.pumpAmmInternalSdk.globalConfigKey();
  }

  poolKey(
    index: number,
    creator: PublicKey,
    baseMint: PublicKey,
    quoteMint: PublicKey,
  ): [PublicKey, number] {
    return this.pumpAmmInternalSdk.poolKey(index, creator, baseMint, quoteMint);
  }

  lpMintKey(pool: PublicKey): [PublicKey, number] {
    return this.pumpAmmInternalSdk.lpMintKey(pool);
  }

  fetchGlobalConfigAccount() {
    return this.pumpAmmInternalSdk.fetchGlobalConfigAccount();
  }

  fetchPool(pool: PublicKey) {
    return this.pumpAmmInternalSdk.fetchPool(pool);
  }

  decodeGlobalConfig(
    globalConfigAccountInfo: AccountInfo<Buffer>,
  ): GlobalConfig {
    return this.pumpAmmInternalSdk.decodeGlobalConfig(globalConfigAccountInfo);
  }

  decodePool(poolAccountInfo: AccountInfo<Buffer>) {
    return this.pumpAmmInternalSdk.decodePool(poolAccountInfo);
  }

  async createPoolInstructions(
    createPoolSolanaState: CreatePoolSolanaState,
    baseIn: BN,
    quoteIn: BN,
  ): Promise<TransactionInstruction[]> {
    return this.pumpAmmInternalSdk.createPoolInstructionsInternal(
      createPoolSolanaState,
      baseIn,
      quoteIn,
    );
  }

  async createAutocompleteInitialPoolPrice(
    initialBase: BN,
    initialQuote: BN,
  ): Promise<BN> {
    return initialQuote.div(initialBase);
  }

  async depositInstructions(
    liquiditySolanaState: LiquiditySolanaState,
    lpToken: BN,
    slippage: number,
  ): Promise<TransactionInstruction[]> {
    const { pool, poolBaseTokenAccount, poolQuoteTokenAccount } =
      liquiditySolanaState;

    const { maxBase, maxQuote } = depositLpToken(
      lpToken,
      slippage,
      new BN(poolBaseTokenAccount.amount.toString()),
      new BN(poolQuoteTokenAccount.amount.toString()),
      pool.lpSupply,
    );

    return this.pumpAmmInternalSdk.depositInstructionsInternal(
      liquiditySolanaState,
      lpToken,
      maxBase,
      maxQuote,
    );
  }

  depositAutocompleteQuoteAndLpTokenFromBase(
    liquiditySolanaState: LiquiditySolanaState,
    base: BN,
    slippage: number,
  ): DepositQuoteAndLpTokenFromBaseResult {
    const { quote, lpToken } = this.pumpAmmInternalSdk.depositBaseInputInternal(
      liquiditySolanaState,
      base,
      slippage,
    );

    return {
      quote,
      lpToken,
    };
  }

  depositAutocompleteBaseAndLpTokenFromQuote(
    liquiditySolanaState: LiquiditySolanaState,
    quote: BN,
    slippage: number,
  ): DepositBaseAndLpTokenFromQuoteResult {
    const { base, lpToken } = this.pumpAmmInternalSdk.depositQuoteInputInternal(
      liquiditySolanaState,
      quote,
      slippage,
    );

    return {
      base,
      lpToken,
    };
  }

  async withdrawInstructions(
    liquiditySolanaState: LiquiditySolanaState,
    lpToken: BN,
    slippage: number,
  ): Promise<TransactionInstruction[]> {
    const { minBase, minQuote } =
      this.pumpAmmInternalSdk.withdrawInputsInternal(
        liquiditySolanaState,
        lpToken,
        slippage,
      );

    return this.pumpAmmInternalSdk.withdrawInstructionsInternal(
      liquiditySolanaState,
      lpToken,
      minBase,
      minQuote,
    );
  }

  withdrawAutoCompleteBaseAndQuoteFromLpToken(
    liquiditySolanaState: LiquiditySolanaState,
    lpAmount: BN,
    slippage: number,
  ): WithdrawAutocompleteResult {
    const { base, quote } = this.pumpAmmInternalSdk.withdrawInputsInternal(
      liquiditySolanaState,
      lpAmount,
      slippage,
    );

    return {
      base,
      quote,
    };
  }

  async swapBaseInstructions(
    swapSolanaState: SwapSolanaState,
    base: BN,
    slippage: number,
    direction: Direction,
  ): Promise<TransactionInstruction[]> {
    if (direction == "quoteToBase") {
      return await this.pumpAmmInternalSdk.buyBaseInput(
        swapSolanaState,
        base,
        slippage,
      );
    }

    return await this.pumpAmmInternalSdk.sellBaseInput(
      swapSolanaState,
      base,
      slippage,
    );
  }

  async swapQuoteInstructions(
    swapSolanaState: SwapSolanaState,
    quote: BN,
    slippage: number,
    direction: Direction,
  ): Promise<TransactionInstruction[]> {
    if (direction == "quoteToBase") {
      return await this.pumpAmmInternalSdk.buyQuoteInput(
        swapSolanaState,
        quote,
        slippage,
      );
    }

    return await this.pumpAmmInternalSdk.sellQuoteInput(
      swapSolanaState,
      quote,
      slippage,
    );
  }

  swapAutocompleteQuoteFromBase(
    swapSolanaState: SwapSolanaState,
    base: BN,
    slippage: number,
    direction: Direction,
  ): BN {
    if (direction == "quoteToBase") {
      return this.pumpAmmInternalSdk.buyAutocompleteQuoteFromBase(
        swapSolanaState,
        base,
        slippage,
      );
    }

    return this.pumpAmmInternalSdk.sellAutocompleteQuoteFromBase(
      swapSolanaState,
      base,
      slippage,
    );
  }

  swapAutocompleteBaseFromQuote(
    swapSolanaState: SwapSolanaState,
    quote: BN,
    slippage: number,
    direction: Direction,
  ): BN {
    if (direction == "quoteToBase") {
      return this.pumpAmmInternalSdk.buyAutocompleteBaseFromQuote(
        swapSolanaState,
        quote,
        slippage,
      );
    }

    return this.pumpAmmInternalSdk.sellAutocompleteBaseFromQuote(
      swapSolanaState,
      quote,
      slippage,
    );
  }

  async extendAccount(
    account: PublicKey,
    user: PublicKey,
  ): Promise<TransactionInstruction> {
    return this.pumpAmmInternalSdk.extendAccount(account, user);
  }

  async collectCoinCreatorFee(
    collectCoinCreatorFeeSolanaState: CollectCoinCreatorFeeSolanaState,
  ): Promise<TransactionInstruction[]> {
    return this.pumpAmmInternalSdk.collectCoinCreatorFee(
      collectCoinCreatorFeeSolanaState,
    );
  }

  async getCoinCreatorVaultBalance(coinCreator: PublicKey): Promise<BN> {
    return this.pumpAmmInternalSdk.getCoinCreatorVaultBalance(coinCreator);
  }

  coinCreatorVaultAuthorityPda(coinCreator: PublicKey) {
    return this.pumpAmmInternalSdk.coinCreatorVaultAuthorityPda(coinCreator);
  }

  coinCreatorVaultAta(
    coinCreatorVaultAuthority: PublicKey,
    quoteMint: PublicKey,
    quoteTokenProgram: PublicKey,
  ) {
    return this.pumpAmmInternalSdk.coinCreatorVaultAta(
      coinCreatorVaultAuthority,
      quoteMint,
      quoteTokenProgram,
    );
  }

  async setCoinCreator(pool: PublicKey): Promise<TransactionInstruction> {
    return this.pumpAmmInternalSdk.setCoinCreator(pool);
  }

  async createPoolSolanaState(
    index: number,
    creator: PublicKey,
    baseMint: PublicKey,
    quoteMint: PublicKey,
    userBaseTokenAccount: PublicKey | undefined = undefined,
    userQuoteTokenAccount: PublicKey | undefined = undefined,
  ): Promise<CreatePoolSolanaState> {
    return this.pumpAmmInternalSdk.createPoolSolanaState(
      index,
      creator,
      baseMint,
      quoteMint,
      userBaseTokenAccount,
      userQuoteTokenAccount,
    );
  }

  async swapSolanaState(
    poolKey: PublicKey,
    user: PublicKey,
    userBaseTokenAccount: PublicKey | undefined = undefined,
    userQuoteTokenAccount: PublicKey | undefined = undefined,
  ): Promise<SwapSolanaState> {
    return this.pumpAmmInternalSdk.swapSolanaState(
      poolKey,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
    );
  }

  async liquiditySolanaState(
    poolKey: PublicKey,
    user: PublicKey,
    userBaseTokenAccount: PublicKey | undefined = undefined,
    userQuoteTokenAccount: PublicKey | undefined = undefined,
    userPoolTokenAccount: PublicKey | undefined = undefined,
  ): Promise<LiquiditySolanaState> {
    return this.pumpAmmInternalSdk.liquiditySolanaState(
      poolKey,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount,
    );
  }

  async collectCoinCreatorFeeSolanaState(
    coinCreator: PublicKey,
    coinCreatorTokenAccount: PublicKey | undefined = undefined,
  ): Promise<CollectCoinCreatorFeeSolanaState> {
    return this.pumpAmmInternalSdk.collectCoinCreatorFeeSolanaState(
      coinCreator,
      coinCreatorTokenAccount,
    );
  }
}
